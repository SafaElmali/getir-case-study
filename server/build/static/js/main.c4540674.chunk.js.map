{"version":3,"sources":["components/Footer/Footer.js","features/todo/todoSlice.js","services/todos.js","components/Header/Header.js","components/TodoList/components/TodoItem.js","components/TodoList/TodoList.js","App.js","app/store.js","index.js"],"names":["Footer","mt","justifyContent","flexDirection","alignItems","fontSize","paddingRight","textAlign","color","href","isExternal","cursor","fill","size","todoSlice","createSlice","name","initialState","todoList","reducers","getTodos","state","action","payload","addTodo","push","updateTodo","map","todo","id","deleteTodo","indexOf","actions","baseUrl","fetchTodoAction","dispatch","a","axios","get","response","data","console","error","message","addTodoAction","post","content","isChecked","editTodoAction","put","Header","useState","setTodo","userInput","useRef","useDispatch","fontStyle","ml","mr","fontWeight","padding","borderRadius","backgroundColor","className","flexGrow","placeholder","value","ref","onChange","prevTodo","current","mb","colorScheme","e","onClick","TodoItem","item","isEdit","setIsEdit","editInput","marginTop","type","style","marginLeft","icon","Check","flexWrap","marginRight","delete","TodoList","useSelector","useEffect","length","index","App","configureStore","reducer","todoReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.c4540674.chunk.js","sourcesContent":["import { AiFillGithub } from \"react-icons/ai\";\nimport { Box, Flex, Text, Link } from \"@chakra-ui/react\";\n\nconst Footer = () => (\n  <footer>\n    <Box mt={5}>\n      <Flex justifyContent=\"center\" flexDirection=\"row\" alignItems=\"center\">\n        <Text\n          fontSize={\"2xl\"}\n          paddingRight={2}\n          textAlign=\"center\"\n          color={\"#fff\"}\n        >\n          Made by Tahsin Safa ElmalÄ±\n        </Text>\n        <Text>\n          <Link href=\"https://github.com/SafaElmali\" isExternal>\n            <AiFillGithub cursor={\"pointer\"} fill={\"#FFD300\"} size={\"2.0em\"} />\n          </Link>\n        </Text>\n      </Flex>\n    </Box>\n  </footer>\n);\n\nexport default Footer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\n/* Slice */\n\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState: {\n    todoList: [],\n  },\n\n  reducers: {\n    getTodos: (state, action) => {\n      state.todoList = action.payload;\n    },\n    addTodo: (state, action) => {\n      state.todoList.push(action.payload);\n    },\n    updateTodo: (state, action) => {\n      state.todoList = state.todoList.map((todo) =>\n        todo.id !== action.payload.id ? todo : action.payload\n      );\n    },\n    deleteTodo: (state, action) => {\n      state.todoList.indexOf(action.payload, 1);\n    },\n  },\n});\n\n/* Actions */\n\nexport const { addTodo, getTodos, updateTodo, deleteTodo } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n","/* eslint-disable import/no-anonymous-default-export */\nimport axios from \"axios\";\n\nimport {\n  addTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from \"../features/todo/todoSlice\";\nconst baseUrl = \"api/todos/\";\n\nexport const fetchTodoAction = () => async (dispatch) => {\n  try {\n    const response = await axios.get(baseUrl);\n    dispatch(getTodos(response.data));\n  } catch (er) {\n    return console.error(er.message);\n  }\n};\n\nexport const addTodoAction = (todo) => async (dispatch) => {\n  const response = await axios.post(baseUrl, {\n    content: todo.content,\n    isChecked: todo.isChecked,\n  });\n  dispatch(addTodo(response.data));\n};\n\nexport const editTodoAction = (todo) => async (dispatch) => {\n  const response = await axios.put(`${baseUrl}/${todo.id}`, {\n    content: todo.content,\n    isChecked: todo.isChecked,\n  });\n  dispatch(updateTodo(response.data));\n};\n\nexport const deleteTodoAction = (id) => async (dispatch) => {\n  await axios.delete(`${baseUrl}/${id}`);\n  dispatch(deleteTodo(id));\n};\n\nexport default { fetchTodoAction, addTodoAction, editTodoAction };\n","import {\n  Box,\n  Flex,\n  Heading,\n  Input,\n  Button,\n  Checkbox,\n  Divider,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAction } from \"../../services/todos\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  const [todo, setTodo] = useState({ content: \"\", isChecked: false });\n  const userInput = useRef();\n  const dispatch = useDispatch();\n\n  const handleAddTodo = () => {\n    dispatch(addTodoAction(todo));\n    setTodo({ content: \"\", isChecked: false });\n  };\n\n  const handleUserInput = () => {\n    setTodo((prevTodo) => {\n      return { ...prevTodo, content: userInput.current.value };\n    });\n  };\n\n  return (\n    <header>\n      <Flex\n        mt={5}\n        fontStyle=\"italic\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Heading color={\"#FFD300\"}>Getir</Heading>\n        <Text\n          ml={3}\n          mr={3}\n          mt={2}\n          fontSize=\"2xl\"\n          fontWeight=\"bold\"\n          color={\"#fff\"}\n        >\n          Todo\n        </Text>\n      </Flex>\n      <Box mt={5} padding={5} borderRadius={15} backgroundColor=\"#fff\">\n        <Box>\n          <Heading fontSize={\"xl\"}>Enter a to-do</Heading>\n          <Box>\n            <Flex className=\"header__form\">\n              <Box flexGrow={8}>\n                <Input\n                  placeholder=\"enter a to-do...\"\n                  value={todo.content}\n                  ref={userInput}\n                  onChange={handleUserInput}\n                />\n              </Box>\n              <Divider mt={3} mb={3} />\n              <Flex alignItems=\"center\" flexGrow={2} justifyContent=\"flex-end\">\n                <Checkbox\n                  colorScheme=\"purple\"\n                  mr={3}\n                  onChange={(e) =>\n                    setTodo((prevTodo) => {\n                      return { ...prevTodo, isChecked: !todo.isChecked };\n                    })\n                  }\n                  isChecked={todo.isChecked}\n                >\n                  Completed ?{\" \"}\n                </Checkbox>\n                <Button\n                  onClick={handleAddTodo}\n                  backgroundColor=\"#FFD300\"\n                  color=\"#5E3EBC\"\n                >\n                  Save\n                </Button>\n              </Flex>\n            </Flex>\n          </Box>\n        </Box>\n      </Box>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useRef, useState } from \"react\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\nimport { Box, Flex, Text, Checkbox, Input } from \"@chakra-ui/react\";\nimport { BsFillTrashFill, BsPencilSquare, BsCheckBox } from \"react-icons/bs\";\nimport { MdCancel } from \"react-icons/md\";\nimport \"./TodoItem.css\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTodoAction, editTodoAction } from \"../../../services/todos\";\n\n\nconst TodoItem = ({ item }) => {\n  const [todo, setTodo] = useState(item);\n  const [isEdit, setIsEdit] = useState(false);\n  const editInput = useRef();\n  const dispatch = useDispatch();\n\n  const handleTodoInput = () => {\n    setTodo((prevTodo) => {\n      return {\n        ...prevTodo,\n        content: editInput.current.value,\n      };\n    });\n  };\n\n  const handleUpdateTodo = () => {\n    dispatch(editTodoAction(todo));\n    setIsEdit(false);\n  };\n\n  const handleTodoDelete = () => {\n    dispatch(deleteTodoAction(todo.id));\n  };\n\n  return (\n    <Box marginTop=\"20px\" padding={5} borderRadius={15} backgroundColor=\"#fff\">\n      <Flex\n        justifyContent=\"space-between\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        {!isEdit ? (\n          <>\n            <Flex flexGrow={1}>\n              <Checkbox\n                isChecked={todo.isChecked}\n                size=\"lg\"\n                icon={<CheckIcon />}\n                colorScheme=\"purple\"\n                mr={3}\n                onChange={() => {\n                  dispatch(\n                    editTodoAction({\n                      ...todo,\n                      isChecked: !todo.isChecked,\n                    })\n                  );\n                  setTodo((prevTodo) => {\n                    return {\n                      ...prevTodo,\n                      isChecked: !todo.isChecked,\n                    };\n                  });\n                }}\n              />\n              <Text\n                cursor=\"pointer\"\n                onClick={() => {\n                  dispatch(\n                    editTodoAction({\n                      ...todo,\n                      isChecked: !todo.isChecked,\n                    })\n                  );\n                  setTodo((prevTodo) => {\n                    return {\n                      ...prevTodo,\n                      isChecked: !todo.isChecked,\n                    };\n                  });\n                }}\n                className={todo.isChecked ? \"todo__text--checked\" : null}\n              >\n                {todo.content}\n              </Text>\n            </Flex>\n          </>\n        ) : (\n          <Flex alignItems=\"center\" flexGrow={1}>\n            <Input\n              type=\"text\"\n              placeholder=\"edit to-do...\"\n              value={todo.content}\n              ref={editInput}\n              onChange={handleTodoInput}\n            />\n            {}\n            <BsCheckBox\n              cursor=\"pointer\"\n              fill={\"green\"}\n              size={\"2em\"}\n              style={{ marginLeft: 15 }}\n              onClick={handleUpdateTodo}\n            />\n            <MdCancel\n              cursor=\"pointer\"\n              fill={\"gray\"}\n              size={\"2em\"}\n              style={{ marginLeft: 15 }}\n              onClick={() => setIsEdit(!isEdit)}\n            />\n          </Flex>\n        )}\n        <Flex\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          flexWrap=\"wrap\"\n          ml={4}\n          className=\"todo__action-container\"\n          flexGrow={0.2}\n          justifyContent=\"flex-end\"\n        >\n          {!isEdit ? (\n            <BsPencilSquare\n              fill={\"#3182ce\"}\n              size={\"1.5em\"}\n              style={{ marginRight: 15 }}\n              onClick={() => setIsEdit(!isEdit)}\n            />\n          ) : null}\n          <BsFillTrashFill\n            fill={\"#e53e3e\"}\n            size={\"1.5em\"}\n            onClick={handleTodoDelete}\n          />\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default TodoItem;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Box, Flex, Heading, Text } from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchTodoAction } from \"../../services/todos\";\nimport TodoItem from \"./components/TodoItem\";\n\nconst TodoList = () => {\n  const { todoList } = useSelector((state) => state.todo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodoAction());\n  }, []);\n\n  return (\n    <Box mt={5}>\n      <Flex fontStyle={\"italic\"} justifyContent=\"center\" alignItems=\"center\">\n        <Heading color={\"#FFD300\"}>To-do</Heading>\n        <Text\n          ml={3}\n          mr={3}\n          mt={2}\n          fontSize=\"2xl\"\n          fontStyle=\"italic\"\n          fontWeight=\"bold\"\n          color={\"#fff\"}\n        >\n          List\n        </Text>\n      </Flex>\n      {todoList.length > 0 ? (\n        todoList.map((todo, index) => {\n          return <TodoItem item={todo} key={index} />;\n        })\n      ) : (\n        <Box mt={4} color=\"#fff\">\n          <Text textAlign=\"center\">There is no to-do item...</Text>\n        </Box>\n      )}\n    </Box>\n  );\n};\nexport default TodoList;\n","import { Container, Flex } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport Header from \"./components/Header/Header\";\r\nimport TodoList from \"./components/TodoList/TodoList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Container>\r\n      <Flex flexDirection=\"column\">\r\n        <Header />\r\n        <TodoList />\r\n      </Flex>\r\n      <Footer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"../features/todo/todoSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todo: todoReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}